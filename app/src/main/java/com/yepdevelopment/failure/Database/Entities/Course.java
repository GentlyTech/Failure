package com.yepdevelopment.failure.Database.Entities;

import static com.yepdevelopment.failure.Globals.DATE_FORMAT;

import androidx.annotation.NonNull;
import androidx.room.Entity;
import androidx.room.Ignore;
import androidx.room.PrimaryKey;

import java.text.SimpleDateFormat;
import java.util.ArrayList;
import java.util.Calendar;
import java.util.List;
import java.util.Locale;
import java.util.UUID;


@Entity
public class Course implements Cloneable {
    @PrimaryKey
    @NonNull
    private String id;
    private String name;
    private String subject;
    private String startDate;
    private String endDate;
    private float minimumGrade;

    @Ignore
    private float remainingGrade;

    /**
     * The submittables this class contains.
     */
    @Ignore
    private List<Submittable> submittables;

    /**
     * Create a Course object, with the given ID.
     * <p/>
     * Use this if you are reconstructing an existing Course.
     */
    public Course(@NonNull String id, String name, String subject, String startDate, String endDate, float minimumGrade) {
        this.id = id;
        this.name = name;
        this.subject = subject;
        this.startDate = startDate;
        this.endDate = endDate;
        this.minimumGrade = com.yepdevelopment.failure.Utils.General.Math.clamp(minimumGrade, 0.0f, 100.0f, 50.0f);
    }

    /**
     * Create a Course object with an autogenerated ID.
     */
    @Ignore
    public Course(String name, String subject, String startDate, String endDate, float minimumGrade) {
        this.id = UUID.randomUUID().toString();
        this.name = name;
        this.subject = subject;
        this.startDate = startDate;
        this.endDate = endDate;
        this.minimumGrade = com.yepdevelopment.failure.Utils.General.Math.clamp(minimumGrade, 0.0f, 100.0f, 50.0f);
    }

    /**
     * Create a Course object with blank defaults.
     */
    @Ignore
    public Course() {
        this.id = UUID.randomUUID().toString();
        this.name = "";
        this.subject = "";
        this.startDate = "";
        this.endDate = "";
        this.minimumGrade = 50.0f;
    }

    public static Course generateRandom() {
        SimpleDateFormat formatter = new SimpleDateFormat(DATE_FORMAT, Locale.CANADA);
        String date = formatter.format(Calendar.getInstance().getTime());
        return new Course(UUID.randomUUID().toString(), UUID.randomUUID().toString(), date, date, (float) (Math.random() * 100));
    }

    @NonNull
    public Course clone() {
        try {
            Course clone = (Course) super.clone();
            return new Course(clone.getId(), clone.name, clone.subject, clone.startDate, clone.endDate, clone.minimumGrade);
        } catch (CloneNotSupportedException ignored) {
            return new Course();
        }

    }

    public String getId() {
        return this.id;
    }

    public void setId(String id) {
        this.id = id;
    }

    public String getName() {
        return this.name;
    }


    public void setName(String name) {
        this.name = name;
    }


    public String getSubject() {
        return this.subject;
    }


    public void setSubject(String subject) {
        this.subject = subject;
    }


    public String getStartDate() {
        return this.startDate;
    }


    public void setStartDate(String startDate) {
        this.startDate = startDate;
    }


    public String getEndDate() {
        return this.endDate;
    }


    public void setEndDate(String endDate) {
        this.endDate = endDate;
    }


    public float getMinimumGrade() {
        return this.minimumGrade;
    }


    public void setMinimumGrade(float minimumGrade) {
        this.minimumGrade = minimumGrade;
    }

    public float getRemainingGrade() {
        return this.remainingGrade;
    }


    public void setRemainingGrade(float remainingGrade) {
        this.remainingGrade = remainingGrade;
    }


    public List<Submittable> getSubmittables() {
        if (this.submittables == null) {
            this.submittables = new ArrayList<Submittable>();
        }
        return this.submittables;
    }


    public void setSubmittables(List<Submittable> submittable) {
        this.submittables = submittable;
    }


    //                          Operations                                  


    public float calculateGrade() {
        float finalGrade = 0.0f;
        for (Submittable submittable : getSubmittables()) {
            if (!submittable.isComplete()) continue;
            finalGrade += submittable.calculateFinalGrade();
        }

        return finalGrade;
    }


}
